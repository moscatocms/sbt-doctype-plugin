@(doctype: org.moscatocms.doctype.Doctype, packageName: String)

@import org.moscatocms.doctype.Field
@import org.moscatocms.doctype.CodeGenerator._

@listFields(code: Field => String) = {
  @for((field, index) <- doctype.definition.fields.zipWithIndex) {
    @code(field) @if(index < doctype.definition.fields.size - 1) { , }
  }
}

package @(packageName).doctypes

import scala.concurrent.ExecutionContext
import spray.routing._
import Directives._
import spray.http._
import spray.httpx.SprayJsonSupport._
import org.moscatocms.api.MoscatoRoute
import org.moscatocms.api.Routes
import @(packageName).model.Tables.@(doctype.className)Row

object @(doctype.className)Route extends MoscatoRoute {

  implicit val executionContext: ExecutionContext = ExecutionContext.Implicits.global

  import @(doctype.className)JsonProtocol._

  def toDataWithId(row: @(doctype.className)Row) =
    @(doctype.className)DataWithId(row.id, @listFields(field => s"row.${field.name}"))

  Routes += pathPrefix("@(doctype.table)") {
    get {
      complete(@(doctype.className)s.list.map(_.map(toDataWithId _)))
    } ~
    post {
      entity(as[@(doctype.className)Data]) { obj =>
        complete(@(doctype.className)s.add(obj).map(toDataWithId _))
      }
    } ~
    path(LongNumber) { id =>
      put {
        entity(as[@(doctype.className)Data]) { obj =>
          complete {
            @(doctype.className)s.update(id, obj).
              map(id => @(doctype.className)s.find(id).map(toDataWithId _))
          }
        }
      }
    }
  }

}
